// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Random3DPointServiceClient is the client API for Random3DPointService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Random3DPointServiceClient interface {
	Get3DVector(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Random3DVector, error)
}

type random3DPointServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRandom3DPointServiceClient(cc grpc.ClientConnInterface) Random3DPointServiceClient {
	return &random3DPointServiceClient{cc}
}

func (c *random3DPointServiceClient) Get3DVector(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Random3DVector, error) {
	out := new(Random3DVector)
	err := c.cc.Invoke(ctx, "/panaew.Random3DPointService/Get3dVector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Random3DPointServiceServer is the server API for Random3DPointService service.
// All implementations should embed UnimplementedRandom3DPointServiceServer
// for forward compatibility
type Random3DPointServiceServer interface {
	Get3DVector(context.Context, *emptypb.Empty) (*Random3DVector, error)
}

// UnimplementedRandom3DPointServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRandom3DPointServiceServer struct {
}

func (UnimplementedRandom3DPointServiceServer) Get3DVector(context.Context, *emptypb.Empty) (*Random3DVector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get3DVector not implemented")
}

// UnsafeRandom3DPointServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Random3DPointServiceServer will
// result in compilation errors.
type UnsafeRandom3DPointServiceServer interface {
	mustEmbedUnimplementedRandom3DPointServiceServer()
}

func RegisterRandom3DPointServiceServer(s grpc.ServiceRegistrar, srv Random3DPointServiceServer) {
	s.RegisterService(&Random3DPointService_ServiceDesc, srv)
}

func _Random3DPointService_Get3DVector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Random3DPointServiceServer).Get3DVector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panaew.Random3DPointService/Get3dVector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Random3DPointServiceServer).Get3DVector(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Random3DPointService_ServiceDesc is the grpc.ServiceDesc for Random3DPointService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Random3DPointService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "panaew.Random3DPointService",
	HandlerType: (*Random3DPointServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get3dVector",
			Handler:    _Random3DPointService_Get3DVector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/random-3d-point.proto",
}
